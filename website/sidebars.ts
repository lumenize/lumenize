import type {SidebarsConfig} from '@docusaurus/plugin-content-docs';

// This runs in Node.js - Don't use client-side code here (browser APIs, JSX...)

// Import TypeDoc sidebars - these may not exist on first build
// Note: TypeDoc plugin exports the items array directly, not an object with items property
let typedocRpcSidebar: any[] = [];
let typedocUtilsSidebar: any[] = [];
let typedocTestingSidebar: any[] = [];

try {
  typedocRpcSidebar = require('./docs/rpc/api/typedoc-sidebar.cjs');
  console.log('✅ Loaded rpc sidebar, items:', typedocRpcSidebar?.length);
} catch (e) {
  console.warn('⚠️  TypeDoc rpc sidebar not yet generated, using empty sidebar');
}

try {
  typedocUtilsSidebar = require('./docs/utils/api/typedoc-sidebar.cjs');
  console.log('✅ Loaded utils sidebar, items:', typedocUtilsSidebar?.length);
} catch (e) {
  console.warn('⚠️  TypeDoc utils sidebar not yet generated, using empty sidebar');
}

try {
  typedocTestingSidebar = require('./docs/testing/api/typedoc-sidebar.cjs');
  console.log('✅ Loaded testing sidebar, items:', typedocTestingSidebar?.length);
} catch (e) {
  console.warn('⚠️  TypeDoc testing sidebar not yet generated, using empty sidebar');
}

/**
 * Recursively transform TypeDoc sidebar items to customize labels.
 */
function transformTypeDocSidebar(items: any[]): any[] {
  if (!items || !Array.isArray(items)) {
    return [];
  }
  
  return items.map((item) => {
    if (item.type === 'category') {
      const newItem = { ...item };
      // Change "Type Aliases" to "Type Utilities"
      if (item.label === 'Type Aliases') {
        newItem.label = 'Type Utilities';
      }
      // Recursively transform child items
      if (item.items) {
        newItem.items = transformTypeDocSidebar(item.items);
      }
      return newItem;
    }
    return item;
  });
}

/**
 * Wrap TypeDoc items in an "API Reference" category
 */
function wrapInApiReference(items: any[], label: string = 'API Reference'): any {
  return {
    type: 'category',
    label,
    items: transformTypeDocSidebar(items),
  };
}

/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */
const sidebars: SidebarsConfig = {
  // Option 2: Mix autogenerated sections with manual TypeDoc imports
  docsSidebar: [
    'introduction',

    // Testing
    {
      type: 'category',
      label: 'Testing',
      items: [
        {
          type: 'doc',
          id: 'testing/usage',
          customProps: {
            docTest: 'doc-test/testing/testing-plain-do/test/usage.test.ts'
          }
        },
        {
          type: 'doc',
          id: 'testing/agents',
          customProps: {
            docTest: 'doc-test/testing/testing-agent-with-agent-client/test/agents.test.ts'
          }
        },
        ...(typedocTestingSidebar && typedocTestingSidebar.length > 0
          ? [wrapInApiReference(typedocTestingSidebar, 'API Reference')]
          : []),
      ],
    },
    
    // RPC
    {
      type: 'category',
      label: 'RPC',
      items: [
        'rpc/introduction',
        'rpc/quick-start',
        'rpc/manual-instrumentation',
        'rpc/error-handling',
        'rpc/limitations',
        ...(typedocRpcSidebar && typedocRpcSidebar.length > 0
          ? [wrapInApiReference(typedocRpcSidebar, 'API Reference')]
          : []),
      ],
    },
    
    // Utils
    {
      type: 'category',
      label: 'Utils',
      items: [
        'utils/route-do-request',
        'utils/cors-support',
        ...(typedocUtilsSidebar && typedocUtilsSidebar.length > 0
          ? [wrapInApiReference(typedocUtilsSidebar, 'API Reference')]
          : []),
      ],
    },

    // LumenizeBase
    {
      type: 'category',
      label: 'LumenizeBase',
      items: [
        'lumenize-base/introduction',
        // ...(typedocLumenizeBaseSidebar && typedocLumenizeBaseSidebar.length > 0
        //   ? [wrapInApiReference(typedocUtilsSidebar, 'API Reference')]
        //   : []),
      ],
    },

    // Lumenize
    {
      type: 'category',
      label: 'Lumenize',
      items: [
        'lumenize/introduction',
        // ...(typedocLumenizeSidebar && typedocLumenizeSidebar.length > 0
        //   ? [wrapInApiReference(typedocUtilsSidebar, 'API Reference')]
        //   : []),
      ],
    },

  ],
};

export default sidebars;
