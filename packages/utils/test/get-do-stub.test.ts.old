import { describe, it, expect } from 'vitest';
import {
  getDOStub,
  InvalidStubPathError,
  PrefixNotFoundError,
  DOBindingNotFoundError,
  MultipleBindingsFoundError
} from '../src/index';

describe('getDOStubFromPathname', () => {
  // Mock Durable Object Namespace
  const mockDONamespace = {
    getByName: (name: string) => ({ name, fetch: () => ({}) }),
    idFromName: () => ({}),
    idFromString: (id: string) => ({ id }),
    get: (id: any) => ({ id, fetch: () => ({}) }),
    getById: () => ({}),
  };

  it.only('should return complete stub information with all required properties', () => {
    const env = { MY_DO: mockDONamespace };
    const result = getDOStub('MY_DO', 'instance-123', env);
    expect(result.stub.name).toBe('instance-123');
    expect(result.doBindingName).toBe('my-do');
    expect(result.instanceNameOrId).toBe('instance-123');
    expect(result.namespace).toBe(mockDONamespace);
  });

  it('should propagate path parsing errors', () => {
    const env = { MY_DO: mockDONamespace };
    
    // Should throw InvalidStubPathError for missing instance name (from parsePathname)
    expect(() => getDOStubFromPathname('/my-do/', env)).toThrow(InvalidStubPathError);
    expect(() => getDOStubFromPathname('/my-do', env)).toThrow(InvalidStubPathError);
  });

  it('should propagate namespace resolution errors', () => {
    const env = { OTHER_DO: mockDONamespace };

    // Should throw InvalidStubPathError for empty path (from parsePathname)
    expect(() => getDOStubFromPathname('/', env)).toThrow(InvalidStubPathError);

    // Should throw DOBindingNotFoundError for unknown binding (from getDONamespaceFromPathSegment)
    expect(() => getDOStubFromPathname('/unknown-binding/instance/path', env)).toThrow(DOBindingNotFoundError);

    // Should throw MultipleBindingsFoundError for ambiguous bindings (from getDONamespaceFromPathSegment)
    const multiEnv = { MY_DO: mockDONamespace, MyDo: mockDONamespace };
    expect(() => getDOStubFromPathname('/my-do/instance/path', multiEnv)).toThrow(MultipleBindingsFoundError);
  });

  it('should propagate prefix errors', () => {
    const env = { MY_DO: mockDONamespace };
    const options = { prefix: '/api' };
    
    // Should throw PrefixNotFoundError when pathname does not match prefix (from parsePathname)
    expect(() => getDOStubFromPathname('/wrong/my-do/instance-123', env, options)).toThrow(PrefixNotFoundError);
  });

  describe('unique ID handling', () => {
    it('should use idFromString for 64-char hex strings', () => {
      const env = { MY_DO: mockDONamespace };
      const uniqueId = '8aa7a69131efa8902661702e701295f168aa5806045ec15d01a2f465bd5f3b99';
      const result = getDOStubFromPathname(`/my-do/${uniqueId}/path`, env);
      expect(result.stub.id).toEqual({ id: uniqueId });
      expect(result.instanceNameOrId).toBe(uniqueId);
    });

    it('should use getByName for non-unique ID strings', () => {
      const env = { MY_DO: mockDONamespace };
      const result = getDOStubFromPathname('/my-do/regular-instance-name/path', env);
      expect(result.stub.name).toBe('regular-instance-name');
      expect(result.instanceNameOrId).toBe('regular-instance-name');
    });

    it('should use getByName for 63-char strings (not 64)', () => {
      const env = { MY_DO: mockDONamespace };
      const shortId = '8aa7a69131efa8902661702e701295f168aa5806045ec15d01a2f465bd5f3b9'; // 63 chars
      const result = getDOStubFromPathname(`/my-do/${shortId}/path`, env);
      expect(result.stub.name).toBe(shortId);
      expect(result.instanceNameOrId).toBe(shortId);
    });

    it('should use getByName for 65-char strings (not 64)', () => {
      const env = { MY_DO: mockDONamespace };
      const longId = '8aa7a69131efa8902661702e701295f168aa5806045ec15d01a2f465bd5f3b999'; // 65 chars
      const result = getDOStubFromPathname(`/my-do/${longId}/path`, env);
      expect(result.stub.name).toBe(longId);
      expect(result.instanceNameOrId).toBe(longId);
    });

    it('should use getByName for 64-char strings with non-hex characters', () => {
      const env = { MY_DO: mockDONamespace };
      const nonHexId = '8aa7a69131efa8902661702e701295f168aa5806045ec15d01a2f465bd5f3bgg'; // contains 'g'
      const result = getDOStubFromPathname(`/my-do/${nonHexId}/path`, env);
      expect(result.stub.name).toBe(nonHexId);
      expect(result.instanceNameOrId).toBe(nonHexId);
    });
  });
});
